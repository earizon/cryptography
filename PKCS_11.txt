# PKCS#11 Summary

* (C API) standard interface for hardware (or Software)  HSM/Smart-Card devices.

## PKCS#11 Nomemclature:

* Token: A hardware" HSM/Smart-Card.
* Slot : Sort of "isolated" (name)space inside a token.
  * An slot also has the optional possibility to be "plugged in" at runtime.
    (User inserting an smart-card in a reader).
* Session: Secure "communication channel" between an application making and 
  the cryptographic device used for securing operations.
* Mechanism: This some sort of operation supported by the PKCS#11 Token.
  (key creation, signature, hashing, symetric encryption, ...).
  * Different hardware will support different mechanism, key lengths, ...

## pkcs11-tool

* "Standard" tool to manage "attached" PKCS#11 devices.

* Summarized from <https://github.com/psmiraglia/docker-softhsm>
  and  <https://man.archlinux.org/man/pkcs11-tool.1.en>

  ```
  # OPINIONATED PRESETUP:
  # - Build SoftHSM OCI image (from DNSSec.org) WITH PKCS#11 Software
  #   implementation to "play" with pkcs11-tool.
  host $ BUILD_ARG="SOFTHSM2_VERSION=2.6.1"
  host $ docker build --build-arg ${BUILD_ARG} --tag pcks11play .  # <·· Build image
  host $ docker run -ti --rm pcks11play sh -l                      # <·· Launch docker shell
  dock $ softhsm2-util --init-token --slot 0 --label "Token01"     # <·· Initialize the Device (PKCS#11 Token) ¹
  (Enter SO PIN and User PIN when required)

  ¹  The STEP/S to initialize the PCKS#11 Token are non standards but they all will end up
    configuring the standard PKCS#11 SO PIN and user PIN.
  ```


  ```
  | # Daily Use (once the PKCS#11 token has ben configured)
  | host $ docker run -ti --rm pcks11play sh -l             # <·· Launch docker shell
  |
  | # -- Let's define some "keyboard shortcuts" as Environment Variables inside container
  |
  | $ readonly MOD=/usr/local/lib/softhsm/libsofthsm2.so # <·· Library implementing the PKCS#11 "C interface"
  | $ readonly P11T="pkcs11-tool --module ${MOD}"  # simplify typing
  | $ readonly P11TL="P11T --login -p '${PIN}' "
  | $ readonly ID="--id 100"                       # default key id used in script.
  | $ ${P11TL} --test             <·· Perform a basic tests on card. (or just -t -l)
  | ...
  | Please enter User PIN: 
  | C_SeedRandom() and C_GenerateRandom():
  |   seems to be OK
  | Digests:
  |   all 4 digest functions seem to work
  |   MD5: OK
  |   SHA-1: OK
  | Signatures: not implemented               <·· NOTE: For SoftHSM it will return "not implemented"
  | Verify (currently only for RSA)                     even if signatre works properly, since only
  |   No private key found for testing                  hardware protected signatures are tested for.
  | Unwrap: not implemented
  | Decryption (currently only for RSA)
  | No errors
  |
  | $ ${P11TL}  --login-type so --init-pin    <·· Init token System Operator (SO) PIN (vs User PIN)
  |
  | $ ${P11TL} --keypairgen --key-type rsa:4906 ${ID} --label ... # <·· Generate new non extractable RSA keypair
  |                                                               #     Use flag --extractable to allow extracting/exporting
  | Using slot 0 with a present token (0x16eba47f)
  | Logging in to "Token01".
  | ...
  | Key pair generated:
  | Private Key Object; RSA 
  |   label:      mySignKey01
  |   ID:         0100
  |   Usage:      decrypt, sign, unwrap
  | Public Key Object; RSA 2048 bits
  |   ...
  |
  | $ ${P11T} --list-objects                  <·· List signature keys, certificates 
  |                                               --type cert    # show only certificates
  |                                               --type privkey # show private keyds
  |
  | $ ${P11T} ${ID} --sign \                  <·· Apply signature to input file
  |   --mechanism RSA-PKCS \                      (Use --list-object to fetch the correct id value)
  |   --input-file data.txt \                     <·· STDIN supported as input file
  |   --output-file data.sig
  |
  | $ ${P11T} ${ID} --verify \                <·· Verify sign. Alt 1: Using pkcs11-tool itself
  |   -m RSA-PKCS \                               
  |   --input-file data.txt \
  |   --signature-file data.sig           
  |                                           
  |                                           <·· Verify sign. Alt 2: Using openssl    
  | $ ${P11T} -r ${ID} \                          <·· STEP 1): Extract public key
  |   --type pubkey > pubkey.der                      (Use --list-object to fetch the id value)
  |                                               
  | $ openssl rsa -inform DER -outform PEM \      <·· STEP 2): convert to pem format 
  |   -in pubkey.der -pubin > pubkey.pem    
  | $ openssl rsautl \                            <·· STEP 3): verify with openssl
  |   -verify \                                       NOTE: rsautl (RSA sig./verif./encr./decr.)
  |   -inkey pubkey.pem \                                   superseded by openssl pkeyutl
  |   -in data.sig -pubin                         
  |
  |                                       # Store(Import) keys/certificates
  | $ ${P11TL} --write-object   cert.der --id $ID --type cert                
  | $ ${P11T} --read-object              --id $ID --type cert > ...          # Read/export stored/imported certificate
  | $ ${P11TL} --write-object priKey.der --id $ID --type privkey --label ... # Discouraged. Prefer to generate internally
  | $ ${P11TL} --write-object pubKey.der --id $ID --type  pubkey --label ... 
  |                                  ^ ^
  |                                  └─┴─ PKCS#11 used ASN.1 binary der only.

  | $ IV="--iv '00000000000000000000000000000000'"
  | $ AES_MEC="-m AES-CBC-PAD"
  | $ ${P11TL} --encrypt --id 85 ${AES_MEC} ${IV} -i input.txt  -o output.aes # Symmetric AES encrypt
  | $ ${P11TL} --decrypt --id 85 ${AES_MEC} ${IV} -i output.aes -o -          # Symmetric AES decrypt
  | 
  | 
  | ${P11TL} --wrap ${AES_MEC} ${IV} --output-file key.aes  <·· Wrap (export by first encrypting) key 76
  |   --id 75 --application-id 76                              using key 75 and AES-CBC-PAD
  |   
  | 
  | 
  | ${P11TL} --unwrap ${AES_MEC} -i key.aes --key-type AES:  <·· Unwrap to key 90, using existing key 22
  |   --applicatin-label ...                                     A new AES key will be created/imported 
  |   --id 22 \                                                  Note: Some tokens may require AES:16 to
  |   --application-id 90 \                                      (16 == bytes key size)
  |
  | ────────────────────────────────────────────────────────────────────────────────────────────────
  | pcks-tool full set of flags: (Summary from `man pkcs11-tool`)
  |
  | # Common options:
  |   --set-id id, -e id | --id id, -d id  | --label name, -a name  
  |   --show-info, -I
  |   --mechanism mechanism, -m mechanism | --list-mechanisms, -M | --allowed-mechanisms mechanisms
  |   --token-label label
  |   --input-file filename, -i filename | --output-file filename, -o filename
  |   --login, -l  | --login-type
  |   --list-interfaces
  |   --module mod   # so/dll path.
  |   --verbose, -v
  |   --private:  object will only be viewable after a login
  |   --sensitive :  set flag so that object cannot be revealed in plaintext
  |   --extractable: Ojbect can be extracted.
  |   --so-pin pin | --pin pin, -p pin  | --puk puk
  |   --salt-len bytes
  |   --always-auth
  |   --type type, -y type
  |   --application-label label | --application-id id
  | 
  | # INIT TOKEN / PIN
  |   --init-token # Init Security Officer PIN (the label must be specified using --label).
  |   --init-pin  | --change-pin, -c | --unlock-pin | --use-locking | --new-pin pin
  | 
  | # KEY GENERATION:
  |   --keypairgen, -k   | --keygen  | --key-type specification 
  | 
  | # SLOT RELATED:
  |   --slot id  | --slot-description | --slot-index index  | --list-slots, -L     | --list-token-slots, -T
  | 
  | # OBJECT(CERTIFICATES) MANAGEMENT
  |   --list-objects, -O  | --read-object, -r  | --delete-object, -b | --object-index index | --write-object filename, -w filename
  |   --issuer data | --subject data
  |   --moz-cert filename, -z filename
  | 
  | # USE CASE
  |                   | --generate-random num
  |                   | --hash, -h | --hash-algorithm mechanism 
  |                   | --mgf function  Message Generation Function (MGF) for RSA-PKCS-PSS signatures | RSA-OAEP 107 decryptions
  |   --usage-sign    | --sign, -s | --signature-file filename | --signature-format format | --verify,
  |   --usage-decrypt | --decrypt 
  |   --usage-derive  | --derive | --derive-pass-der
  |   --usage-wrap
  |  └───────────────┴─ flag when creating keys.
  | 
  | # TESTING
  |   --test-threads options | --test, -t | --test-hotplug | --test-ec | --test-fork
  |   --allow-sw: Allow soft.mechanisms with no CKF_HW flag set. 
  ```


## PEM headers

 ```
 | ──────────────────────────────   ─────────────────────────────────────
 | OBJECT TYPE                      PEM HEADER 
 | ──────────────────────────────   ─────────────────────────────────────
 | PKCS#1 RSAPublicKey              BEGIN RSA PUBLIC KEY
 |                                  -----BEGIN RSA PRIVATE KEY-----
 | PKCS#8 EncryptedPrivateKeyInfo   BEGIN ENCRYPTED PRIVATE KEY
 | PKCS#8 PrivateKeyInfo            BEGIN PRIVATE KEY
 | X.509 SubjectPublicKeyInfo       BEGIN PUBLIC KEY
 | CSR PEM header :                 ----BEGIN NEW CERTIFICATE REQUEST-----
 | DSA PrivateKeyInfo               -----BEGIN DSA PRIVATE KEY----
 | OpenSSH Private key              -----BEGIN OPENSSH PRIVATE KEY-----
 ```


# PKCS#11 TODO

## PKCS#11 for TLS client authentication example
  <https://github.com/miladhub/pkcs11-tls-client-auth>

  ```
  | 1. Install SoftHSM
  | 2. Set up the PKCS#11 keystore
  | 3. Create server PKCS#11 keystore
  | 4. Create client PKCS#11 keystore
  | 5. Create server PKCS#12 truststore
  | 6. Create client PKCS#12 truststore
  | 7. Listing the contents of keystores and trust stores.
  | 8. Starting the server (mvn jetty:run -f jetty-flst-server)
  | 9. Running the client 
  |    java -cp pkcs11-tls-client/target/pkcs11-tls-client-1.0-SNAPSHOT.jar \
  |     -Djavax.net.ssl.keyStoreType=PKCS11 \
  |     -Djavax.net.ssl.keyStore=NONE \
  |     -Djavax.net.ssl.keyStorePassword=1234 \
  |     -Djavax.net.ssl.trustStoreType=PKCS12 \
  |     -Djavax.net.ssl.trustStore=client-truststore.p12 \
  |     -Djavax.net.ssl.trustStorePassword=changeit \
  |     org.example.SysPropsPKCS11HttpsClient \
  |     pkcs11.cfg https://localhost:8443/hello 
  ```



## PKCS11 on top of Linux Trusted Platform Module 2  (TPM2)

* <https://github.com/tpm2-software/tpm2-pkcs11>

* NOTE:
 C&P from https://en.wikipedia.org/wiki/Trusted_Platform_Module 
  Trusted Platform Module (TPM) is an international standard 
  for a secure cryptoprocessor, a dedicated microcontroller designed to 
  secure hardware through integrated cryptographic keys. The term can 
  also refer to a chip conforming to the standard ISO/IEC 11889. Common 
  uses are to verify platform integrity (to verify that the boot 
  process starts from a trusted combination of hardware and software), 
  and to store disk encryption keys.
  * One of Windows 11's operating system requirements is TPM 2.0 implementation. 
    Microsoft has stated that this is to help increase security against firmware attacks.
  * The bloat of functions was criticised, especially random number generation.


## OpenSSL PKCS11 provider.

* <https://github.com/latchset/pkcs11-provider>

...  OpenSSL 3.0 was introduced in RHEL 9, with 3 providers covering
all the main use cases, including the FIPS module, there were no
other other mature providers ... In RHEL 10, we have a new PKCS#11
provider. We've also added several more providers.
