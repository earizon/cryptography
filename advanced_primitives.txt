# ADVANCED PRIMITIVES

[[{use_case.data_integrity,crypt_symmetric,doc_has.comparative,PM.TODO]]
## FERNET Simmetric Encryption

* Fernet guarantees that a message encrypted using it
  can NOT be manipulated or even read without the key.
* Fernet also has support for implementing key rotation via MultiFernet. [[qa.UX]]
[[}]]

[[{101,crypt_oneway.hash,crypt_oneway.accumulator,use_case.privacy,use_case.data_integrity,PM.TODO]]
## CRYPTO ACCUMULATOR
* introducced in 1993 by Benaloh and de Mare.
* one way non-invertible function.
* It answers a query as to whether a potential candidate is
   a member of a set without revealing the individual members of the set.
* They are the cryptographic counterpart of Bloom Filters data structure:
  <https://hal.archives-ouvertes.fr/hal-00999432/document>
  * A Bloom filter is a space-efficient probabilistic data structure,
    used to test whether an element is a member of a set.
    Bloom filter setup)
    ```
    |                     bloom-filter0 = 000000000000...........0
    | Element1 > hash1 >  bloom-filter1 = bloom-filter 0   || hash1
    | Element2 > hash2 >  bloom-filter2 = bloom-filter 1      hash2
    | ...                 ...
    | ElementN > hashN >  bloom-filterN = bloom-filter N-1    hashN
    ```
  * Bloom filter Ussage)
    ```
    | Q: ElementI belongs to Set?
    | A: ElementI > hashI
    |    if (hashI && bloom-filterN == hashI )
    |       "maybe" (false positives are possible)
    |    else
    |       "definetly no"
    ```
  * Crypto Accumulator Ex:
    ```
    large composite number
    CP01 = P1 x P2 x P3 x ... PN
           └────────┬──────────┘
    New members may be added or subtracted to the set of
    factors simply by multiplying or factoring out the number respectively.
    ```
    Q: Does P2 "belongs" to CP01?<br/>
    A: Yes, but we still don't known P1, P3, ... PN<br/>
- Use case include: time-stamping schemes , search on encrypteddata ,
  data aggregation in sensor networks [19] and distillation codes.
- Sanderet al. use RSA accumulator to designblind and auditablea
  membership proof scheme in the context of e-cash. The ideais that an
  accumulator of all the valid electronic coins is created and
  published.During coins transfer, anyone can verify the validity of
  the exchange thanks tothe accumulator.

Extracted from:
<https://medium.com/@aurelcode/cryptographic-accumulators-da3aa4561d77>
"""... We can think of accumulators as a super-charged hash function that
  works on sets. A regular hash function, like SHA-3, takes a single message and
  outputs a fixed-size hash. An accumulator, however, takes a set of values and
  turns them into a single number, also of constant size.
  ```
  | Alice secret
  |   > alt 1: hash     ··> publish hash ··> reveal message to Bob (Bob can check)
  |            secret
  |   > alt 2: add to   ··> publish accu ··> reveal message to Bob, Bob can check,
  |            accumulator                   but the rest of secrets of the
  |                                          accumulator stay in place.
  ```
"""

## Batching Techniques for Accumulators
<https://eprint.iacr.org/2018/1188.pdf>
* Batching Techniques for Accumulators with Applications to IOPs and
  Stateless Blockchains
* Abstract:
  ```
  We  present  batching  techniques  for  cryptographic  accumulators
  and  vector  commitments  in  groups  of  unknown  order.
  .. tailored for distributed settings where no trusted
  accumulator manager exists and up-dates to the accumulator are
  processed in batches.  We develop techniques for non-interactively
  aggregating  membership  proofs  that  can  be  verified  with
  aconstant number of group operations.  We also provide a constant
  sized batchnon-membership  proof  for  a  large  number  of
  elements.<br/>
    We use these new accumulator and vector commitment constructions t
  design a stateless blockchain, where nodes only need a constant
  amount of storage inorder to participate in consensus.
  Further, we show how to use these techniquesto reduce the size
  of IOP instantiations, such as STARKs.
  ```
* Applications:
  * Stateless blockchains
  * Short IOPs:<br/>
      Merkle tree paths contribute significant overhead to both the proof
    size of a compiledIOP proof and its verification time. Vector
    commitments with smaller openings thanMerkle trees, or batchable
    openings (i.e.  subvector commitments), can help reducethis overhead
    ...  our VCs reduce the sizeof the Aurora proofs on a 220size
    circuit from 222 KB to less than 100 KB, a 54%reduction,  and  the
    size  of  STARK  proofs  for  a  circuit  of  252gates  from  600
    KBto approximately 222 KB, a 63% reduction.

* Conclusion:
  We expect that our techniques and constructions will have more
  applications beyond what  was  discussed.   Several  interesting  open
   questions  remain:   What  practical limitations occur when deploying
  the scheme?  Is it possible to efficiently compute unions  of
  accumulators?   This  is  certainly  true  for  Merkle  trees  but
  these  do  nothave the batching properties and constant size of RSA
  accumulators.  Similarly canone build an accumulator with constant
  sized witnesses from a quantum resistant assumption?   Additionally,
  we  hope  that  this  research  motivates  further  study  ofclass
  groups as a group of unknown order
[[}]]

# Advanced Signature Schemas

## MULTISIG VS THRESHOLD SIGNATURE SCHEMES [[{101,use_case.signature,doc_has.comparative]]

* Multi-signature schemes require the network to verify each signature,
  increasing load with the number of participants.
* Conversely, threshold signatures are generated offline and result in
  a single signature regardless of total number of parties participating.

## MULTISIGNATURE
<https://en.wikipedia.org/wiki/Multisignature>
* Digital signature scheme which allows a group of users to
  sign a single document. Usually, a multisignature algorithm produces
  a joint signature that is more compact than a collection of distinct
  signatures from all users
* A tuple of N signatures is the simplest (non-compacted)
  multisignature scheme
* Multisignature can be considered as generalization of both group
  and ring signatures.
  * Used to add additional security for cryptocurrency transactions
  * The required number of signatures is agreed upfront
  * Allows for the creation of N-of-M escrow services
  * Tree-signatures (Aug 24, 2015 by Pieter Wuille, Ph.D.):
    <https://www.blockstream.com/2015/08/24/treesignatures/>
   """Imagine you want to create a 1-of-11 multisig (with 11 known public keys).
   You compute the SHA256 hashes of the public keys involved and put them in
   a Merkle tree. In the graph below, all symbol names represent 32-byte hashes,
   except the 1. The 1 is used as a simple constant instead of a right branch
   when there is none."""
   ```
   |                             R
   |                          /     \
   |                       /           \
   |                   /                   \
   |               Z1                          Z2
   |            /      \                     /   \
   |       Y1              Y2              Y3     1
   |      /  \            /  \            /  \
   |   X1      X2      X3      X4      X5      X6
   |  / \     / \     / \     / \     / \     / \
   | K1 K2   K3 K4   K5 K6   K7 K8   K9 K10 K11  1
   ```
   "" Using the script in our Alpha sidechain, we can build a script that takes
   as input a public key, a signature, and a Merkle path. At verification time,
   it would use the Merkle path to prove that the public key belongs to a tree
   with root R, and that the signature checks out with that public key."""

## THRESHOLD CRYPTOSYSTEM
<http://en.wikipedia.org/wiki/Threshold_cryptosystem> (TODO)
* In order to decrypt an encrypted message, several parties
  (more than some threshold number) must cooperate in the decryption
  protocol. The message is encrypted using a public key and the
  corresponding private key is shared among the participating parties.
  Let "n" be the number of parties. Such a system is called (t,n)-threshold,
  if at least t of these parties can efficiently decrypt the ciphertext,
  while less than t have no useful information.
* Similarly it is possible to define (t,n)-threshold signature scheme,
  where at least t parties are required for creating a signature.
* The most common application is in the storage of secrets in multiple
  locations to prevent the capture of the ciphertext and the subsequent
  cryptanalysis on that ciphertext. Most often the secrets that are
  "split" are the secret key material of a public key cryptography key
  pair or the ciphertext of stored password hashes.
* In October 2012 after a number of large public website password
  ciphertext compromises, RSA Security announced that it would be
  releasing software that makes the technology available to the general
  public

## GROUP SIGNATURE
<https://en.wikipedia.org/wiki/Group_signature>
* A group signature scheme is a method for allowing a member of a group to
  anonymously sign a message on behalf of the group.
* For example, a group signature scheme could be used by an employee of
  a large company where it is sufficient for a verifier to know a message
  was signed by an employee, but not which particular employee signed it.
* Essential to a group signature scheme is a group manager, who is in charge
  of adding group members and has the ability to reveal the original signer
  in the event of disputes. In some systems the responsibilities of adding
  members and revoking signature anonymity are separated and given to a
  membership manager and revocation manager respectively.

## PROXY SIGNATURE
- A proxy signature allows a delegator to give partial signing rights
  to other parties called proxy signers. Proxy signatures do not offer
  Anonymity

## RING SIGNATURE
<https://en.wikipedia.org/wiki/Ring_signature>
* Type of digital signature that can be performed by any member of
  a group of users that each have keys.
  One of the security properties of a ring signature is
  that it should be computationally infeasible to determine which of
  the group members' keys was used to produce the signature
* Ring signatures are similar to group signatures but differ in two key
  ways: first, there is no way to revoke the anonymity of an individual
  signature, and second, any group of users can be used as a group without
  additional setup.
* Invented by Ron Rivest, Adi Shamir, and Yael Tauman, and introduced
  at ASIACRYPT in 2001
* Suppose that a group of entities each have public/private key pairs,
  (Pub_1, Secret_1), ..., (Pn, Secret_n).
  Party i can compute a ring signature σ on a message "m", on input
  ("m", Secret_i, Pub_1, ..., Pub_n). Anyone can check the
  validity of a ring signature given σ, m, and the public keys involved,
  P1, ..., Pn. If a ring signature is properly computed, it should pass
  the check. On the other hand, it should be hard for anyone to create a
  valid ring signature on any message for any group without knowing any
  of the private keys for that group.

## BLIND (CHAUMIAN) SIGNATURE *
<https://en.wikipedia.org/wiki/Blind_signature>
* Blind signature schemes exist for many public key signing protocols
  Blind RSA signatures, Blind ECDSA signatures,
* Java implementation:
  <https://archive.is/20130416090835/http://www.maniora.pl/?p=101">
* form of digital signature in which the content of a message is
  disguised/blinded before being signed. The resulting blind signature can
  be publicly verified against the original, unblinded message in the manner
  of a regular digital signature.
* Blind signatures are typically employed in privacy-related
  protocols where the signer and message author are different parties.
  Examples include cryptographic election systems and digital cash schemes:
  ```
  |Seq. Diagram                                                   
  |participant user # creates a message ("vote") and blinds it    
  |participant signer # authenticates user and sign blinded message
  |signer > user: authenticate user                               
  |user   > user: +message                                        
  |user   > user: message > blind > blinded_message               
  |user   > signer: blinded_message                               
  |signer > signer: +signed_blinded_message                       
  ```

## Identity-Based Aggregate Signatures
* REF: <https://link.springer.com/chapter/10.1007/11745853_17>
* An aggregate signature is a single short string that convinces any
  verifier that, for all 1 ≤ i ≤ n, signer S i signed message M i ,
  where the n signers and n messages may all be distinct. The main
  motivation of aggregate signatures is compactness. However, while
  the aggregate signature itself may be compact, aggregate signature
  verification might require potentially lengthy additional
  information – namely, the (at most) n distinct signer public keys
  and the (at most) n distinct messages being signed. If the verifier
  must obtain and/or store this additional information, the primary
  benefit of aggregate signatures is largely negated.
[[}]]


