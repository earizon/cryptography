# OpenGPG Standard [[{standards.pgp]]

[[{secret_mng,tool.opengpg,tech_stack.git,secret_mng.keystore,crypt_symmetric,crypt_asymmetric,use_case.signature]]

## OpenPGP Summary
* PGP: Pretty Good Privacy: encryption program (1991 Phil Zimmermann)
       Used for signing, encrypting, and decrypting texts, e-mails,
       files, directories, disks, e-mails.
* OpenPGP: Open Standard around PGP software (RFC 4880)
* GPG: Gnu Privacy Guard implementation

## Symmetric file encryption
* simpler and more secure than asym. one.
* Can NOT be used to publish with anonymous or untrusted users.
  For example, it can NOT be used to cypher (or sign) content in
  public software repositories since there is no way to distribute the
  private key to future and unknown/untrusted recipients.
* In can be used to store secrets safely in private repositories like git.
* Ex Ussage:
  * PRE-SETUP :
    "master key" : Private key that git team keeps secret (ideally "memorized")
    Different master keys can be used in different contexts.
    ```
    | $ ls secrets.txt*
    | secrets.txt                              ← Secrets to access login, resources, ddbbs,...
    |                                             add to .gitignore  to avoid distributing secrets
    |
    | $ cat secrets.txt \
    |     | gpg -c --batch --passphrase $pass\   ← Generates binary encrypted output Q *1
    |     | base64 \                             ← (optional): Allows to copy in mail/stdin/...
    |     > secrets.txt.gpg.base64
    |       └───────┬────────────┘
    |       Can be added to git : Each time "master key" is
    |       rotated, this file must be regenerated (and old
    |       master key used in the mean time to decrypt).
    |
    | $ cat secrets.txt.gpg.base64 \
    |     | base64 -d \
    |     | gpg -d --batch --passphrase $pass \    Q *1
    |     > secrets.txt
    |
    | Q *1 : Remove --batch --passphrase options to ask for password interactively.
    |        (probably safer, but can not be scripted easily)
    ```
   * SAFE CLEAN-UP :
    ```
    | $ shred -n 2 -z -v secrets.txt   ← safe/secure deletion. Standard
    |                                    "rm" leaves original bytes in the
    |                                    hard-disk
    ```

### GPG: managing pub/priv. keys

* Before signing and encripting we need to learn how to create/import/export PGP keys.
  REF:<http://central.sonatype.org/pages/working-with-pgp-signatures.html>

  ```
  | $ gpg --gen-key                 ← Create new key pair defs: RSA 2048bit, no-expire
  | #                                     (enter name,email                      ^^^^^^^^^
  |                                         when prompted)           Recommended <=2 years
  |                                                        Once expired it can be extended
  |                                                        providing  key (and passphrase)
  |
  | $ gpg2 --list-keys              ←  LIST ALL PUB. KEYS (ours and imported/pulled)
  | /home/juven/.gnupg/pubring.gpg
  | ------------------------------
  | pub   1024D/C6EED57A 2010-01-13  ← Seed key
  | uid   ...<old.mcdonalds@farm.com>
  | sub   2048g/D704745C 2010-01-13  ← Sub.signing key
  |       └─┬─┘ └──┬───┘
  |      length   key id
  |
  | $ gpg2 --list-secret-keys        ← LIST PUBLIC KEYS FROM OUR PRIVATE KEYS
  | /home/juven/.gnupg/secring.gpg
  | ------------------------------
  | sec   1024D/C6EED57A 2010-01-13  ← Seed key
  | uid   ...<old.mcdonalds@farm.com>
  | ssb   2048g/D704745C 2010-01-13  ← Sub.signing key
  |
  | KEYSERVER="hkp://pool.sks-keyservers.net"
  | ┌──────────────────────────────────┬───────────────────────────────────┐
  | │         "PUSH" PUB.KEY           │           "PULL" PUB.KEY          │
  | ├──────────────────────────────────┼───────────────────────────────────┤
  | │$ gpg2 --keyserver ${KEYSERVER} \ │ $ gpg2 --keyserver ${KEYSERVER} \ │
  | │$     --send-keys B C6EED57A      │ $     --recv-keys C6EED57A        │
  | └──────────────────────────────────┴───────────────────────────────────┘
  |
  | $ gpg2 --edit-key A6BAB25C       ←  MODIFY KEY
  |   ... Secret key is available.
  |   pub  2048R/A6BAB25C  created: ...  expires: ...
  |        trust: ultimate      validity: ultimate
  |   sub  2048R/DD289F64  created: ...  expires: ...
  |        Juven Xu (for testing) <test@juvenxu.com>
  |   ...
  |   gpg>   1   # ← Choose key
  |   pub  2048R/A6BAB25C  created: ...  expires: ...  usage: SC
  |        trust: ultimate      validity: ultimate
  |   sub  2048R/DD289F64  created: ...  expires: ...  usage: E
  |   (1)* Juven Xu (for testing) <test@juvenxu.com>
  |
  |   gpg>   expire                     ←  EXPIRE A KEY
  |   > ...
  |   > Please specify how long the key should be valid.
  |           0 = key does not expire
  |         <n> = key expires in n days
  |        ...
  |   gpg>   save                       ← send key ("push") to sync changes remotely
  ```

* Troubleshooting problems with Maven and others:
  mvn and some other app will only recognise the primary key,
  ignoring subkeys. A "patch" solution consists in deleting
  the  singing subkey forcing GPG to use the primary key.
  ```
  | $ gpg2 --edit-key A6BAB25C       ←  MODIFY KEY
  | ...
  | pub  2048R/A6BAB25C  created:... usage: SC   ← Seed Key.   Only key recognised by maven and others
  |      trust: ultimate validity: ultimate
  | sub  2048R/DD289F64  created:...  usage: E   ← Default (E)ncryption key
  | sub  2048R/8738EC86  created:...  usage: S   ← Default (S)igning    key
  |                                                (  Must be removed to use maven pgp plugin   )
  | gpg>   key 2  (index start at 0)               (Not needed if using gpg from comand line)
  | ...                                               │
  | gpg>   delkey   ← Alt 1: Key not yet published  ←─┘
  | gpg>   revoke   ← Alt 2: Key already published
  | gpg>   save
  | -------------------------------------------------

  | *****************
  | * Signing files *
  | *****************
  | $ gpg2 -ab temp.java            ←  SIGNING A FILE
  |                                   -a create ASCII armored output
  |                                   -b make detached signature
  | $ gpg2 --verify temp.java.asc   ←  Verify new signature
  ```


### GPG Advanced (Symmetric) multi-level file encryption

* Bell–LaPadula Model:
  <https://en.wikipedia.org/wiki/Bell%E2%80%93LaPadula_model>
  ```
  Level 3 user have passwords to encrypt/decrypt level     3
  level 2 user have passwords to encrypt/decrypt level   2,3
  level 1 user have passwords to encrypt/decrypt level 1,2,3
  ```

  ```
  | $ LEVEL1=level1Ciphered.base64 ; DECODE_LEVEL1=decodedlevel1 ;
  | $ LEVEL2=level2Ciphered.base64 ; DECODE_LEVEL2=decodedlevel2 ;
  | $ LEVEL3=level3Ciphered.base64 ; DECODE_LEVEL3=decodedlevel3 ;
  | 
  | $ GPG_C="gpg -c --batch --passphrase " # Encode
  | $ GPG_D="gpg -d --batch --passphrase " # Decode
  |
  | # Encode
  | $ (                 echo "secrets level 1" ) | ${GPG_C} ${PASS_LEVEL1} | base64 > ${LEVEL1}
  | $ ( cat ${LEVEL1} ; echo "secrets level 2" ) | ${GPG_C} ${PASS_LEVEL2} | base64 > ${LEVEL2}
  | $ ( cat ${LEVEL2} ; echo "secrets level 3" ) | ${GPG_C} ${PASS_LEVEL3} | base64 > ${LEVEL3}
  | 
  | # Decode
  | $ cat ${LEVEL3} | base64 -d | ${GPG_C} ${PASS_LEVEL1} >   ${LEVEL2} 
  | $ cat ${LEVEL2} | base64 -d | ${GPG_C} ${PASS_LEVEL2} >   ${LEVEL1} 
  | $ cat ${LEVEL1} | base64 -d | ${GPG_C} ${PASS_LEVEL3} >  PLAIN_TEXT 
  ```
[[secret_mng}]]
[[tool.opengpg}]]

[[{standards.pgp,tool.opengpg,use_case.signature,data_integrity.linked_data_signature,PM.TODO]]
## OpenPgpSignature2019
* <https://github.com/decentralized-identity/OpenPgpSignature2019>
* OpenPGP is a standard that defines formats for encryption keys and
  messages. By providing a Linked Data Signature suite that uses
  OpenPGP we can leverage a more established standard to support an
  emerging one (Linked Data Signatures). A Linked Data Signature Suite
  for OpenPGP also enables OpenPGP to be used as a building block for
  other standards, such as Decentralized Identifiers.
* This signature suite follows the approach taken by:
  * Ed25519Signature2018  :
  * RsaSignature2017
  * EcdsaKoblitzSignature2016
* cli Ussage example:
  * Sign a json document:
  ```
  | $ openpgpsignature2019 sign -u "3AF00854CF8D9237" \
  |   $(pwd)/src/__tests__/__fixtures__/documents/example.json \
  |   did:btcr:xxcl-lzpq-q83a-0d5#yubikey
  ```
  * Verify a document:
  ```
  | $ openpgpsignature2019 verify $(pwd)/src/__tests__/__fixtures_\
  |   _/documents/exampleSigned.json
  ```
* library ussage example:
  ```
  | const keys = await OpenPgpSignature2019.generateKey({....})
  | const signedData = await OpenPgpSignature2019.sign(
  |     { data: jsonDoc,
  |       privateKey: keys.privateKey,
  |       proof: {
  |         verificationMethod: "https://example.com/i/alice/keys/1",
  |         proofPurpose: "assertionMethod"
  |       }
  |     });
  |
  | const verified = await OpenPgpSignature2019.verify({
  |   data: signedData,
  |   options: ...
  | });
  ```
[[}]]

## Keybase ("GPG++") [[{standards.pgp,tech_stack.keybase,use_case.identity]]
                     [[use_case.signature,qa.UX,PM.TODO,]]
* <https://julien.ponge.org/blog/simpler-gnupg-with-another-look-at-keybase/>
* Keybase essentially introduced a modern way to build trust networks, because
  people can check that user123 on Keybase is also user123_coder on GitHub,
  user123 on Twitter, and that the user owns the iamuser123.org domain. One can
  do so by posting Keybase-signed messages to these social networks and places.
  This is a good idea, because from social networks and Keybase accounts linked
  to those social networks, you can build a trust network on Keybase.
* Keybase provides a simplified workflow for common tasks including public key
  management (e.g., fetching keys of your contacts), and it has GnuPG
  interoperability. You may even make the devilish (read: convenient) choice of
  having your keys stored on Keybase, or just attach existing GnuPG keys that you
  will still manage locally.
* <https://github.com/tldr-pages/tldr/blob/master/pages/common/keybase.md>  [TODO]
  More info at: <https://keybase.io/docs/command_line>
[[}]]

## guncat (Gpg UNencrypting CAT) [[{qa.UX]]
* REF: <https://fbb-git.gitlab.io/guncat/>
* designed to tackle problems with (partially) PGP encrypted files
   e.g. mailboxes. Tools to process text-files (like grep(1), or less(1)) may be
  used to process those files, but standard tools like cat(1) leave PGP
  encrypted sections within such files as-is. As a consequence, browsing the
  `real' contents (i.e., clear-text sections and the unencrypted contents of PGP
  encrypted sections) of those files is difficult.
* Guncat  acts like cat, but unencrypts encrypted sections encountered in
  the files processed by guncat, copying the unencrypted  information  to
  guncat's  standard  output  stream, which may thereupon be processed by
  other tools.
[[}]]

## Sequoia Implementation [[{PM.TODO]]
* <https://sequoia-pgp.org/>
* Open PGP library focusing on safety and correctness.
[[}]]

## OpenPGP.js [[{standards.pgp,tech_stack.javascript,PM.TODO]]
<https://github.com/openpgpjs/openpgpjs>
JavaScript implementation of the OpenPGP protocol defined in RFC 4880.
* a/symmetric (En/de)crypt Uint8Array with PGP key/password.
* Encrypt with compression
* Data Streaming support.
* key pair generation / revocation.
* "Push"/"pull"  public keys from HKP server
* Sign/verify cleartext/Uint8Array stream messages
  (detach signature support)
[[}]]
[[}]]

# OpenGPG TODO
* <https://github.com/tldr-pages/tldr/blob/master/pages/common/gpg.md>
* <https://github.com/tldr-pages/tldr/blob/master/pages/common/gpg2.md>
* <https://github.com/tldr-pages/tldr/blob/master/pages/common/gpgv.md><br/>
  Verify OpenPGP signatures.
  More information at: 
  <https://www.gnupg.org/documentation/manuals/gnupg/gpgv.html>


