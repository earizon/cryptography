# OpenSSL How-To Summary [[{protocol.tls.openssl]]

## OpenSSL Engines vs Providers

* Engines  : Deprecated as of OpenSSL v3, did not allow for "moving" requirements (Maintainable 
  FIPS-140-3 certified modules,...). It required dangerous and numerous runtime checks and 
  was hardly sustainable, neither it allowed to separate FIPS/non-FIPS algorithms and implementations
  in a robust manner, with data crossing back and forht the FIPS boundary.
* Providers: Replaces engines with "plugable" providers. 
  * It can be seen as a "**unit of code**" providing 1+ implementations of cryptographic 
    operations (hashing, signature, ..) making new algorithms available. 
  * Dynamically loaded plugin as set in OpenSSL config. file.
  * Current providers include (based on RHEL 10+):
    * FIPS   :
    * PKCS#11:
    * TPM2   :
    * OQS    : for post-quantum algorithms (experimental).

OpenSSL  provider options:
  ```
  | $ openssl list -providers 
  | -provider-path ...  Provider load path (must be before 'provider' argument if required)
  | -provider val  ···  Provider to load (can be specified multiple times)
  | -propquery val ···  Property query used when fetching algorithms
  ```

## OpenSSL Ext. Refs:
  * <https://ciphersuite.info/cs/>:  DDBB about different chipher-suites strenghts
  * <https://en.wikipedia.org/wiki/X.509>
  * <https://www.openssl.org/docs/manmaster/man1/>
  * <https://www.ietf.org/rfc/rfc5280.txt> X.509 PKI

* Common openssl opts:
  * -in   : path for input certificate being examined. Many times
            STDIN from previous 'openssl s_client ...' is preferred.
            $ openssl s_client ... | openssl ...
  * -noout: prevents encoded version output (of request/response)
  * -text : Show OUTPUT in human readable text (vs hex formated binary)
  * -nodes: flag:  DO NOT  pass-phrase-encrypt Pub.Key

* openssl summary:
  ```
  | [[{101}]]
  | $ openssl list -help  (Output from openssl OpenSSL 3.0.9 30 May 2023)
  | 
  |  -1                        List in one column
  |  -verbose                  Verbose listing
  |  -select val               Select a single algorithm
  |  -commands                 List of standard commands
  |  -standard-commands 
  |   | asn1parse         ca                ciphers           cmp               
  |   | cms               crl               crl2pkcs7         dgst              
  |   | dhparam           dsa               dsaparam          ec                
  |   | ecparam           enc               engine            errstr            
  |   | fipsinstall       gendsa            genpkey           genrsa            
  |   | help              info              kdf               list              
  |   | mac               nseq              ocsp              passwd            
  |   | pkcs12            pkcs7             pkcs8             pkey              
  |   | pkeyparam         pkeyutl           prime             rand              
  |   | rehash            req               rsa               rsautl            
  |   | s_client          s_server          s_time            sess_id           
  |   | smime             speed             spkac             srp               
  |   | storeutl          ts                verify            version           
  |   | x509              
  |  -digest-commands          List of message digest commands (deprecated)
  |   | blake2b512        blake2s256        md5               rmd160            
  |   | sha1              sha224            sha256            sha3-224          
  |   | sha3-256          sha3-384          sha3-512          sha384            
  |   | sha512            sha512-224        sha512-256        shake128          
  |   | shake256          sm3               
  |  -digest-algorithms        List of message digest algorithms
  |   | MD4/5, SHA1, SHA3-*, SM3 (BLAKE...), RIPEMD160, ...
  |  -kdf-algorithms           List of key derivation and pseudo random function algorithms
  |   | HKDF, TLS13-KDF, SSKDF, PKCS12KDF, SSHKDF, 
  |   | TLS1-PRF, KBKDF X942KDF(-ASN1), KRB5KDF
  |  -random-instances         List the primary, public and private random number generator details
  |   | CTR-DRBG (cipher: 'AES-256-CTR')
  |  -random-generators        List of random number generators
  |  -mac-algorithms           List of message authentication code algorithms
  |   | BLAKE2BMAC, CMAC, HMAC, KMAC-128/256, SIPHASH, POLY1305 
  |  -cipher-commands          List of cipher commands (deprecated)
  |   | openssl list -cipher-commands
  |   |      aes-XXX-(ecb|cbc)
  |   |     aria-XXX-(cfb1|cbf8|ctr|ecb)
  |   | camellia-XXX-(ecb|cbc)
  |   |      des-ede(|3)-(ofb|cbc|cfb)
  |  -cipher-algorithms        List of symmetric cipher algorithms
  |   | AES-XXX-(CBC|CBC-HMAC-SHA1|CBC-HMAC-SHA256|CFB|CFB1|CFB8|CTR|ECB|OCB|OFB|XTS)
  |   | ARIA-XXX-(CBC|CCM|CFB|CFB1|CFB8|CTR|ECB|GCM|OFB)
  |   | BF-(CBC|CFB|ECB|OFB)
  |   | CAMELLIA-128-(CBC|CFB|CFB1|CFB8|CTR|ECB|OFB|CBC|CFB|CFB1|CFB8|CTR|ECB|OFB|CBC|CFB|CFB1|CFB8|CTR|ECB|OFB)
  |   | CAST5-(CBC|CFB|ECB|OFB)
  |   | ChaCha20(|-Poly1305)
  |   | DES-(CBC|CFB|CFB1|CFB8|ECB|EDE|EDE-CBC|EDE-CFB), DES-EDE-OFB, DES-(EDE3|CBC|CFB|CFB1|CFB8|OFB), DESX-CBC
  |   | IDEA-(CBC|CFB|ECB|OFB)
  |   | RC2*, RC4*, RC5*
  |   | SEED-(CBC|CFB|ECB|OFB)
  |  -encoders                 List of encoding methods
  |   | blob, der, msblob, pem, pvk, text
  |  -decoders                 List of decoding methods
  |   | blob, der, msblob, pem, pvk, text
  |  -key-managers             List of key managers
  |   | RSA , PKCS#3, DSA , EC , RSA-PSS, X9.42 DH , X25519, 
  |   | X448, ED25519, ED448, TLS1_PRF via EVP_PKEY, HKDF via EVP_PKEY, 
  |   | SCRYPT via EVP_PKEY, HMAC via EVP_PKEY, SIPHASH via EVP_PKEY, 
  |   | POLY1305 via EVP_PKEY, CMAC via EVP_PKEY
  |  -key-exchange-algorithms  List of key exchange algorithms
  |   | DH | ECDH | TLS1-PRF | HKDF | SCRYPT
  |  -kem-algorithms           List of key encapsulation mechanism algorithms
  |   | RSA, rsaEncryption
  |  -signature-algorithms     List of signature algorithms
  |   | RSA, DSA*, ED25519, ED448, ECDSA
  |  -asymcipher-algorithms    List of asymmetric cipher algorithms
  |   | RSA
  |  -public-key-algorithms    List of public key algorithms
  |   | Name: OpenSSL (PKCS#3 DH|RSA|DSA|EC|RSA-PSS|X9.42 DH |X25519|X448|ED25519|ED448) method
  |  -public-key-methods       List of public key methods
  |   | Encryption:
  |   |  { 1.2.840.113549.1.1.1, 2.5.8.1.1, RSA, rsaEncryption } @ default
  |   | Key Exchange: DH, X25519, X448, ECDH, TLS1-PRF, HKDF, SCRYPT
  |   | Signatures  : RSA, DSA*, ED25519, ED448, ECDSA, HMAC, SIPHASH, POLY1305, CMAC
  |   | Key Encapsu.: RSA
  |  -store-loaders            List of store loaders
  |   | file
  |  -engines                  List of loaded engines (deprecated in favor of providers)
  |   | rdrand | dynamic
  |  -disabled                 List of disabled features
  |   | EC2M| MDC2| SM2| SM4| SSL3
  |  -options val              List options for specified command
  |  -objects                  List built in objects (OID<->name mappings)
  |   (list 1200+ objects)
  | 
  ```
  


* Commonly used script/batch ENV.VARs:
  ```
  export DOMAIN="mydomain.com"
  export SUBJ="/C=ES/ST=Aragon/L=Zaragoza/O=MyOrganization/CN=${DOMAIN}"
  export NUM_OF_DAYS="999"
  ```

 ```
 | **Request>create>install new Server Certificate Flow**
 |   admin>admin: Create Private Key ← Pub.Key autogenerated from Priv.Key
 |   alt
 |     admin>admin : Sign self-Cert  ← Dev. Purposes
 |   else:
 |     admin>admin: Create CSR       ← CSR: Cert. Signing Request with Pub.key
 | ┌>  admin>CA    : CSR
 | │   CA←>admin   : Validate KYC,...← KYC: "Know Your Customer"
 | │   CA>CA       : Create Cert     ← Happy path. CSR approved.
 | │   CA>amdin    : Cert.
 | │   admin>server: Cert.           ← Server: Apache, Nginx, ...
 | │
 | └─ $ openssl req  -new  -nodes              ← Create key + CSR.
 |    -newkey rsa:2048 -keyout ${DOMAIN}.key \   ← Replace -newkey ... -keyout ...
 |    -out ${DOMAIN}.csr -subj "${SUBJ}" \         by -key ${DOMAIN}.key to reuse
 |                                                 already existing private key
 |    -addext "subjectAltName = DNS:foo.co.uk" \
 |    -addext "certificatePolicies = 1.2.3.4" \  ← Can Sign? Can
 ```

 ```
 | **Managing Private Keys**       | **dump x509 inf**
 | CREATE A PRIVATE KEY:           | $ openssl x509 -in myCert.pem -text
 |$ openssl \                      | $ openssl x509 -in myCert.crt -text -inform DER
 |    genrsa -des3 \                                           ^                 ^
 |    -out ${DOMAIN}.key 2048                     crt/cer admits PEM and DER binary
 |(Enter password when prompted)                  encoding. For binary the option
 |                                                "-inform DER" must be passed or
 |                                                the command will fail.
 | **VERIFY PRIVATE KEY**
 |$ openssl rsa -check -in ${DOMAIN}.key
 |
 | **Verify private key matches certificate and CS**
 | (If the output of each of the next command is identical there is an
 |  extremely high probability that the private key, certificate,
 |  and CSR are related)
 |  $ openssl rsa  -noout -modulus -in ${DOMAIN}.key | openssl md5
 |  $ openssl x509 -noout -modulus -in ${DOMAIN}.crt | openssl md5
 |  $ openssl req  -noout -modulus -in ${DOMAIN}.csr | openssl md5
 |
 | Encrypt/Decrypt private key
 |$ openssl rsa -des3 -in unencrypted.key -out encrypted.key
 |$ openssl rsa       -in encrypted.key   -out decrypted.key
 ```

 ```
 | Self-Signed-Cert
 | working on Chrome/Java/...
 |REF:
 |- chrome deprecates subject cn matching]
 |<https://textslashplain.com/2017/03/10/chrome-deprecates-subject-cn-matching/>
 |- Fixing Fixing Chrome 58+ [missing_subjectAltName] with openssl&amp;S.S.certs</a>
 |<https://alexanderzeitler.com/articles/Fixing-Chrome-missing_subjectAltName-selfsigned-cert-openssl/>
 |- getting-chrome-to-accept-self-signed-localhost-certificate
 |<https://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate/43666288#43666288>
 | create_root_cert_and_key.sh
 | |#!/usr/bin/env bash
 | |openssl genrsa -out rootCA.key 2048
 | |openssl req -x509 -nodes \
 | |    -days $NUM_OF_DAYS \
 | |    -key rootCA.key -sha256 \
 | |    -out rootCA.pem
 | |    -new
 |      ^^^^
 |      replace with -in $DOMAIN.csr to reuse crt
 ```

 ```
 | **create_certificate_for_domain.sh**
 | #!/usr/bin/env bash
 | 
 | if [ -z "$1" ]; then
 |   echo "Ussage: $0 myDomain.com"
 |   echo "           ^^^^^^^^^^^^"
 |   echo "    # alt1     wildcard"
 |   echo "        $0 www.myDomain.com"
 |   echo "           ^^^^^^^^^^^^^^^^"
 |   echo "    # alt2 non-wildcard"
 |   exit 1;
 | fi
 | if [ ! -f rootCA.pem ]; then 
 |   echo 'no rootCA.pem detected. Please, run create_root_cert_and_key.sh first, and try again!' 
 |   exit 1
 | fi
 | if [ ! -f v3.ext     ]; then
 |   echo 'Please download the "v3.ext" file and try again!'
 |   exit
 | fi
 | if [ -f $DOMAIN.key ]; then #  ← Create new Priv.Key || reuse existing one
 |   KEY_OPT="-key"
 |  else 
 |   KEY_OPT="-keyout"
 | fi 
 | 
 | cat << EOF > /tmp/__v3.ext
 | authorityKeyIdentifier=keyid,issuer
 | basicConstraints=CA:FALSE
 | keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
 | subjectAltName = @alt_names
 | 
 | [alt_names]
 | DNS.1 = $COMMON_NAME
 | EOF
 | 
 | openssl req -new -newkey rsa:2048 \
 |    -sha256 -nodes $KEY_OPT $DOMAIN.key \
 |    -subj "$SUBJECT" -out $DOMAIN.csr
 | openssl x509 -req -in $DOMAIN.csr \
 |    -CA rootCA.pem -CAkey rootCA.key \
 |    -CAcreateserial -out $DOMAIN.crt \
 |    -days $NUM_OF_DAYS -sha256 \
 |    -extfile /tmp/__v3.ext
 |
 | Ussage:
 |$ ./create_root_cert_and_key.sh        # ← STEP 01: create root Auth cert
 |
 |$ ./create_certificate_for_domain.sh \ # ← STEP 02
 |   mysite.com                          #   Alt 1
 |   www.mysite.com www.mysite.com       #   Alt 2
 |
 |Note: You will also new to import the new cert. authority.
 |For example on Mac:
 |    Open Keychain Access
 |    Choose "System" in the "Keychains" list
 |    Choose "Certificates" in the "Category" list
 |    Choose "File | Import Items..."
 |    Browse to the file created above, "rootCA.pem", select it, and click "Open"
 ```


### Certificate Formats

* X.509 v3+ ENCODINGS:
  * DER: (Binary) DER == ASN.1 (D)istinguised -vs Basic/Canonical- (E)ncoding (R)ules
  * PEM: (Base64) PEM == (P)rivacy (E)nhanced (M)ail, prefixed with "—– BEGIN ..."
    Default encoding in OpenSSL/ssh/.... Easier to C&P
* Common FILE-EXTENSIONS:
  * *.CRT: Certificates encoded as binary DER/PEM.
  * *.CER: Mostly similar to .CRT, recognized by some Micrsooft apps.
  * *.KEY: used for private PKCS#8 keys encoded as DER/PEM.

* RELATED STANDARDS: PKCS #7, PCKS #12  <#PKCS_summary>
  P7B ASCII files which can contain (non-secret) Certs. and CA certificates.

* PKCS#12: FILE FORMAT commonly used for (PRIVATE)KEYSTORES, protected with
           password-based symmetric key. Used by:
  * Java key store
  * client auth. certs in Firefox, Apache Tomcat, ...
  * "PFX" files.

  ```
  |                                                                      # CONVERTING TO/FROM
  |$ openssl x509 -inform pem -in ${DOMAIN}.crt \                        # PEM   > DER
  |  -outform der -out ${DOMAIN}.der
  |$ openssl x509 -inform der -in ${DOMAIN}.der \                        # DER   > PEM
- |outform pem -out ${DOMAIN}.crt
  |$ openssl crl2pkcs7 -nocrl -certfile ${DOMAIN}.crt \                  # PEM   > PKCS7
  |  -certfile ca-chain.crt -out ${DOMAIN}.p7b
  |$ openssl pkcs7 -in ${DOMAIN}.p7b \                                   # PKCS7 > PEM
  |   -print_certs -out ${DOMAIN}.crt     
  |$ openssl pkcs12 -inkey ${DOMAIN}.key \                               # PEM   > PKCS12
  |   -in ${DOMAIN}.crt -export -out ${DOMAIN}.pfx
  |$ openssl pkcs12 -in ${DOMAIN}.pfx -nodes  \                          # PKCS12 > PEM
  |  -out ${DOMAIN}.combined.crt 
  |$ openssl x509 -in ${DOMAIN}.cer -outform PEM -out ${DOMAIN}.pem      # x509 > PEM
  ```

### Random Recipes

* Generate FINGERPRINT from TLS certificate.<br/>
  CRYPTOG_HASH(public_key) used as ID of pub.keys.
  ```
  |$ openssl x509 -in ${DOMAIN}.crt \
  |  -noout -fingerprint -sha256        
  | fa:23:a4:48:............:56
  ```
* Protect JS from remote changes [[{tech_stack.javascript]]
  ```
  |$ cat jquery-2.1.4.min.js | openssl dgst -sha256 # 
  |> f321e2a........ <·· hexadecimal format           
  |
  |<script src="./jequery-2.1.4.min.js"
  |        integrity="sha256-8WqyJLuWKRB...="> <·· base64 format
  |</script>
  ```
 [[}]]
* fetch 1st-in-chain web cert, then add to Java.KeyStore:                     
  ```
  |$ openssl s_client \
  |   -connect www.mywebsite.com:443 \
  |   -showcerts </dev/null 2>/dev/null | \        VIEW AND VERIFY CS
  |  openssl x509 \                               │$ openssl req \
  |    -outform PEM > infura-morden.pem           │  -text  \  # "view"
  |$ ($JAVA_HOME/Contents/Home/jre/bin/)keytool \ │  -verify \ # "verify"
  |    -import -noprompt -trustcacerts \          │  -noout \
  |    -alias www.mywebsite.com -f                │-in ${DOMAIN}.csr
  ```
* Check version/build
  ```
  | $ openssl version -a
  ```
* LIST SUPPORTED CIPHERS
  ```
  |$ openssl ciphers -s -tls1_3 ← -s -tls1_1: filter for sepcific TLS version
  |> TLS_AES      _256_GCM_SHA384:TLS_AES      _128_GCM_SHA256:...
  ```
* test cipher-suite against serve
  ```
  | $ openssl s_client \              Ex:
  |   -connect domain.com:443 \      Using weak (128bit) cipher will probably fail
  |   -cipher PSK-AES128-CBC-SHA \ ← or -tls1_1 to test TLS supported version.
  |   -quiet -no_tls1_3
  ```
* Verify that cert. was signed by given CA:
  ```
  |$ openssl verify -verbose -CAFile ca.crt ${DOMAIN}.crt
  ```
* Examine Cert. Extension/s
  ```
  | $ openssl x509 \               check Subject Alternative Name(SAN) extension ,
  |   -in ... -noout \             used to associate 1+ values (FQDNs,...) to 1 Cert.
  |   -ext subjectAltName       ←  Also used as alternative to deprecated common name.
  | > X509v3 Subject Alt. Name:    NOTE: Use commas to separate 2+ extensions:
  | >   DNS:*.domi01.com, DNS:...  OTHER WIDELY USED X509 EXTENSIONS INCLUDE:
  |                                · 'basicConstraints'
  |                                · 'keyUsage'  (Can Sign?, Can Sign CRL?...)
  |                                (leave -ext alone to show all extensions in Cert)
  ```

### CRL how-to with OpenSSL

* WARN: Some companies/apps have deprecated CRLs in
  favor of  Online Certificate Status Protocol (OCSP).
  CRL == Cert. list of ALREADY revoked Certs.

  * PRE-SETUP) Set crl_day check period
    ```
    | $ editor .../intermediate/openssl.cnf 
    |  [ CA_default ]
    |  ...
    |  default_crl_days = 30                <·· periodic checking ...
    |  [ server_cert ]
    |  # ... snipped ...
    | *crlDistributionPoints = URI:http...  <·· See man for + crl options
    ```
  * STEP 2: Periodically recreate CLR.
    perioadically according to default_crl_days defined in STEP 1)
    ```
    | $ export CLR_OUTPUT=intermediate/crl/intermediate.crl.pem
    |
    | $ cd ~/ca                           
    | $ openssl ca \
    |   -config intermediate/openssl.cnf \
    |   -gencrl  \                        
    |   -out ${CLR_OUTPUT}
    ```
  * STEP 3: Verify output of STEP 2. 
    ```
    | $ openssl crl \                     
    |   -in ${CLR_OUTPUT} \
    |   -noout -text
    | > ... No Revoked Certificates
    |  (No certificates have been revoked yet)
    ```
  * STEP 4: make CLR_OUTPUT accessible through HTTP URL indicated in STEP 1
    ```
    | NOTE: For servers authenticating clients through X.509 certs,
    |       copy the generated crl file to a path indicated by the server config
    |       ('SSLCARevocationPath' in Apache HTTP, 'crl-verify' in OpenVPN,...)
    ```
  * REVOKE A CERTIFICATE
    ```
    | $ cd ~/ca
    | $ openssl ca \
    |   -config intermediate/openssl.cnf \
    |   -revoke  \
    |   intermediate/certs/bob@example.com.cert.pem
    ```
  * NOTE: CRL distribution points in X.509 Certs visible in X509v3 details.
    ```
    |    # openssl x509 -in ${DOMAIN}.cert.pem -noout -text
    |    ...
    |      X509v3 CRL Distribution Points:
    |
    |          Full Name:
    |            URI:http://domain1.com/intermediate.crl.pem
    |    ...
    ```


[[{monitoring.TLS,tool.troubleshooting.certificates,tool.openssl]]
### check TLS cert.expiration 
<https://www.cyberciti.biz/faq/find-check-tls-ssl-certificate-expiry-date-from-linux-unix/>
  ```
  | $ export server="www.nixcraft.com"
  | $ export port="443"
  |                              **Show validity/expiration dates for CERT**
  |                                =======================================
  | $ echo | \                   ← Avoid pressing CTRL+C
  |   openssl s_client \         ← implements generic TLS network client
  |   -servername $server \      ← Set TLS Ser.NameIndication(SNI)@ClientHello msg
  |   -connect $server:$port  | \
  |   openssl x509 \             ← Run certificate display and signing utility.
  |                                Use '-in file_input.pem' if no STDIN is present.
  |       -noout \               ← Prevent encoded version output
  |       -dates                 ← show also start+expiry dates
  | (Output will be similar to...)
  | depth=2 C = US, O = Inet Sec...Group, CN = ISRG Root X1
  | verify return:1
  | depth=1 C = US, O = Let's Encrypt, CN = R3
  | verify return:1
  | depth=0 CN = www.nixcraft.com
  | verify return:1
  | DONE
  | notBefore=Nov 11 01:15:45 2021 GMT
  | notAfter=Feb  9 01:15:44 2022 GMT
  |
  |                              **Check: expiration date before 4 months**?
  |                                =======================================
  | $ echo | \                   ← Avoid pressing CTRL+C
  |   openssl s_client \         ← implements generic TLS network client
  |   -servername $server \      ← Set TLS Ser.NameIndication(SNI)@ClientHello msg
  |   -connect $server:$port  | \
  |   openssl x509 \             ← Run certificate display and signing utility.
  |                                Use '-in file_input.pem' if no STDIN is present.
  |       -noout \               ← Prevent encoded version output
  |       -enddate \
  |       -checkend 10540800     ← == 4months x 30.5days/m x 24hour/d x 3600 secs/h
  | (Output will be similar to...)
  | ...
  | DONE
  | notAfter=Feb  9 01:15:44 2022 GMT
  | Certificate will expire      ← $? will return 1 (it will expire!)
  ```
[[monitoring.TLS}]]


## make-ca (KISS CA)
<https://github.com/djlucas/make-ca/blob/master/make-ca>
*  Simple scripts around OpenSSL to create a local certificate authority.
[[protocol.tls.letsencrypt}]]


[[protocol.tls.openssl}]]
