# ZKP: Why and How skSNARKS

* <https://arxiv.org/pdf/1906.07221.pdf>

## Intuitive idea for ZKP:
  if prover claims to know some polynomial (also known to verifier),
  they can follow next simple protocol to verify the statement:
  ```
  participant Prover   as P
  participant Verifier as V
  V -> V: evaluate polynomial around random 'x'
  V -> P: share 'x' to prover, ask him to evaluate pol('x')
  P -> P: evaluate polynomial locally around random 'x'
  P -> V: result
  V -> V: ¿results match?
  ```
## Protocol:
0. PRESETUP: Verifier doesn't want to reveal original polynomial, only that
   the original polynomial p(x) -not revealed- is like:
   ```
   | p(x) = t(x)·h(x) ; 
   |             └──┴─  arbitrary polynomial (N co-factors of p)
   |        └──┴─·····  (t)arget polynomial  (1 co-factor  of p)
   | or ....
   | "p(x) contains all the roots of t(x)" arbitrary polynomial
   | └─── THE VERY THING TO BE PROVEN ───┘
   | Prover   knows p(x), t(x), p(x) and shares t(x) with Verifier
   | Verifier knows t(x) (after being shared by Prover)
   ```
1. "Running" the protocol:
   ```
   V -> V: evaluate t(r) around random 'r'.
   V -> P: share t(r) with prover + ¿p(r)?
   P -> P: calculate h(x) = p(x)/t(x), keeping h(x) private
   P -> P: calculate h(r)   p(r)
   P -> V: share     h(r)   p(r)
   V -> V: ¿p(r) == t(t) · h(r) ?
           (Verifier still doesn't know p(x), just a random point p(r))
   WARN: **TRUSTED SETUP**. Prover is fair, not lying about h(r),p(r).
   ```

## HOMOMORPHIC ENCRYPTION
   ```
   | [[{doc_has.keypoint]]
   | Map operations like:
   |
   | WORKING ON NATURAL NUMBERS:
   |                    ┌ 5: g(enerator): arbitrary 
   |                    v    constant in protocol
   |   3+2 = 5  <····>  5³·5²  = 5²⁺³
   |   3+2 = 5  <····>  5³·5²  = 5²⁺³
   |   3-2 = 1  <····>  5³/5²  = 5²⁻³
   |   3·2 = 6  <····> (5³ )²  = 5²·³
   |   3^2 = 9  <····> ¡¡¡FAIL!!! Spoiler: Bilinear pairs fix it
   |                   ax³ +bx² + cx must be provided with
   |                   x₀³,x₀² pre-calculated in original group
   |                   to calculate: 5^(a·x₀³ +b·x₀² + c·x₀)
   |  └───────┘        └─────────────┘
   |  Logarithm <····> Exponent  
   | 
   | WORKING ON MODULAR ARITHMETIC
   | 
   |   3+2 = 5  ·····>  5³·5²  = 5²⁺³ (mod 7)
   |   3-2 = 1  ·····>  5³/5²  = 5²⁻³ (mod 7)
   |   3·2 = 6  ·····> ( 5³ )² = 5²·³ (mod 7)
   |  └───────┘        └────────────────────┘
   |  Logarithm ·····> Exponent (mod Prime)
   |    It is STIPULATED (WARN: ¡¡¡not proven!!!) that logₐ is
   | difficult/impossible to be calculated for big prime numbers. 
   | [[doc_has.keypoint}]]
   ```

## Trusted-prover in homomorphic ZK protocol:

  ```
  V -> V: sample random exponent (secret) x₀='s' 
  V -> V: pre-calculate g^s⁰,g^s¹, g^s², ... g^sⁿ
  V -> V: calculate t(s) ("target polynomial" at random secret)
  V -> P: share g^s⁰,g^s¹, g^s², ... g^sⁿ with prover.
  P -> P: calculate h(x) = p(x)/t(x) = c₀x⁰+c₁s¹+...+cₘxⁿ
  P -> P: calculate h(s) = c₀s⁰+c₁s¹+...+cₘsⁿ in homeomorphic group:
    g^(c₀·s⁰)·g^(c₁·s¹)·...·g^(cₘ·sⁿ) 
    sums            become multiplications
    multiplications become powers
  P -> V: share h(s)
  V -> V: check p(s) = t(s) · h(s) in encrypted space:
          g^p = (g^h)^t(s) = g^( t(s)·h )

  note over P: Prover does NOT know original 's' anymore,
    he can still ignore input from verifier,
    compute new random 'r' ... replicate Verifier 
    steps and return result aplying to fake p'.
    So P must be a Trusted-prover.
  ```

## non-Trusted-prover in homomorphic ZK protocol:
  ```
  V -> V: sample random exponent (secret) x₀=`s`
  V -> V: derive "shifted" `αs`
  V -> P: share (g^s⁰ , g^s¹  ...  g^sⁿ) and
                (g^αs⁰, g^αs¹  ... g^αsⁿ)
  P -> P: Repeat steps in previous protocol for s,αs.
  P -> V: Share g^p(s), g^p(αs)
  V -> V: Check (g^p(s))^α = (g^p(α))
  ```

## Pending problems (to be fixed in next protocols)
1. PENDING PROBLEM 1: C₀,C₁,..Cₙ are quite small allowing
   for brute-force attacks. The protocol must be secure
   even for polynomial with a single coeficient.
2. PENDING PROBLEM 2: The protocol is interactive and
   verifier must "stay online" and repeat from scratch for
   each new prover (since prover could share its results
   with other fake provers).

## non-Trusted-prover NON-INTERACTIVE in homomorphic ZK protocol:

1. PROBLEM: We want somehow secure the secrets (t(s), α)
   after they are produced, BUT homomorphic encryption used does
   NOT SUPPORT multiplication of encrypted values, necessary for
   both verification checks: `[ t(s) * h , p * α]` <br/>
   SOLUTION: CRYPTOGRAPHIC PAIRINGS (bilinear maps):
   ```
    e(g^a, g^b) ·····> e (g,g)^ab  
    NOTE: In practice we use (g)enerators in Ellip.Curves.
   ```
   * KEY-POINT: The ouput of pairing is an HOMOMORPHIC ENCRYPTED
     PRODUCT OF RAW VALUES under a different generator g of the
     target set, i.e., e(g^a, g^b) = g^ab.
   * NOTE: Output group ("target set") is different from input
     group, so pairings can not be concatenated.
   * Being homorphic means that we can add the encrypted products
     of multiple pairings together:
     ```
      e(g^a, g^b) = e(g^b,g^a) = e(g^ab, g^1) = e(g^1,g^ab) =
      = e(g^1,g^a)^b = e(g, g)^ab  = ...
     ```
The protocol now looks like:
  ```
  V -> V: select random (secret) exponent `s` and "shifted" `αs`.
  V -> V: calculate (g^s⁰, g^s¹  ...  g^sⁿ) and
                    (g^αs⁰, g^αs¹  ... g^αsⁿ)
  V -> V: Delete random 's' and "shifted" 'αs'.
  V -> P: Share with prover
  ```

